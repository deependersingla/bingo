<html>
<head>
<title>Minimal JS Demo</title>
 
<!-- CSS goes here -->
<style>
body {
	background-color: #FFF; /* example... */
}
</style>
 
<!-- TODO - replace with asset pipeline -->
<script type="text/javascript" src="https://cs.stanford.edu/people/karpathy/convnetjs/build/util.js"></script>
<script type="text/javascript" src="https://cs.stanford.edu/people/karpathy/convnetjs/build/vis.js"></script>
<script type="text/javascript" src="https://cs.stanford.edu/people/karpathy/convnetjs/build/deepqlearn.js"></script>

<script type="text/javascript">

// API description
// 
// start game = /game_api/play_game?user_id=
// send result = /game_api/give_number?user_id&q=
// 
// grab user id from cookies
var user_id = <%= @user_id %>;

// SETUP FOR BRAIN
// 
// 
var num_inputs = 25; // each box
var num_actions = 25; // every box is clickable
var temporal_window = 1; // amount of temporal memory. 0 = agent lives in-the-moment :simple_smile:
var network_size = num_inputs * temporal_window + num_actions * temporal_window + num_inputs;

// the value function network computes a value of taking any of the possible actions
// given an input state. Here we specify one explicitly the hard way
// but user could also equivalently instead use opt.hidden_layer_sizes = [20,20]
// to just insert simple relu hidden layers.
var layer_defs = [];
layer_defs.push({type:'input', out_sx:1, out_sy:1, out_depth: network_size});
layer_defs.push({type:'fc', num_neurons: 100, activation:'relu'});
layer_defs.push({type:'fc', num_neurons: 100, activation:'relu'});
layer_defs.push({type:'fc', num_neurons: 50, activation:'relu'});
layer_defs.push({type:'regression', num_neurons: num_actions});

var tdtrainer_options = {learning_rate:0.001, momentum:0.0, batch_size:64, l2_decay:0.01};

var opt = {};
opt.temporal_window = temporal_window;
opt.experience_size = 30000;
opt.start_learn_threshold = 1000;
opt.gamma = 0.7;
opt.learning_steps_total = 200000;
opt.learning_steps_burnin = 3000;
opt.epsilon_min = 0.05;
opt.epsilon_test_time = 0.05;
opt.layer_defs = layer_defs;
opt.tdtrainer_options = tdtrainer_options;

var brain = new deepqlearn.Brain(num_inputs, num_actions);



// MAIN RUNNER
// 
// 
var iteration = 1;

// Steps 
// 1. record the reward from the play_game response
// 2. get the next action from the input vector
// 3. send a request with the nextAction
function iterationResponseHandler(data, status) {
	// record reward
	brain.backward(data.reward);
	// wrap input vector (boxes grid)
	var vol = new convnetjs.Vol(data.input_vector);
	// pass the input to the brain
	var nextAction = brain.forward(vol);
	// visualization library for the convnet brain
	brain.visSelf(document.getElementById('brain_info_div'));

	iteration++; // Deep - do we even need to limit iterations?
	if(iteration < 100000) { // Deep - let me know if you want to put a timer in to change the speed of the requests

		// send next action to the API via AJAX (XHR)
		$.ajax({
			url: "/game_api/give_number?user_id=" + user_id + "&q=" + nextAction + "&human_cut_lines=" + data.human_cut_lines,
			context: document.body
		}).done( iterationResponseHandler );

	}
}

// first request
$.ajax({
	url: "/game_api/play_game?user_id=" + user_id,
	context: document.body
}).done( function(data, status) {
	iterationResponseHandler(data, status);
});
</script>

</head>

<body>
	<h1>Minimal UI Demo of ConvNet.js killing the Boxes AI</h1>

	<div id="brain_info_div"></div>
</body>

</html>
