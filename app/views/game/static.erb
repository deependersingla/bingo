<html>
<head>
<title>Minimal JS Demo</title>
 
<!-- CSS goes here -->
<style>
body {
	background-color: #FFF; /* example... */
}
</style>
 
<!-- TODO - replace with asset pipeline -->
<!-- <script type="text/javascript" src="https://cs.stanford.edu/people/karpathy/convnetjs/build/util.js"></script>
<script type="text/javascript" src="https://cs.stanford.edu/people/karpathy/convnetjs/build/vis.js"></script>
<script type="text/javascript" src="https://cs.stanford.edu/people/karpathy/convnetjs/build/deepqlearn.js"></script> -->

<script type="text/javascript">

// API description
// 
// start game = /game_api/play_game?user_id=
// send result = /game_api/give_number?user_id&q=
// 
// grab user id from cookies
var user_id = <%= @user_id %>;

// SETUP FOR BRAIN
// 
// 
var num_inputs = 25; // each box
var num_actions = 25; // every box is clickable
var temporal_window = 0; // amount of temporal memory. 0 = agent lives in-the-moment :simple_smile:
var network_size = num_inputs * temporal_window + num_actions * temporal_window + num_inputs;

// the value function network computes a value of taking any of the possible actions
// given an input state. Here we specify one explicitly the hard way
// but user could also equivalently instead use opt.hidden_layer_sizes = [20,20]
// to just insert simple relu hidden layers.
var layer_defs = [];
layer_defs.push({type:'input', out_sx:1, out_sy:1, out_depth: network_size});
layer_defs.push({type:'fc', num_neurons: 100, activation:'relu'});
layer_defs.push({type:'fc', num_neurons: 50, activation:'relu'});
layer_defs.push({type:'regression', num_neurons: num_actions});

var tdtrainer_options = {learning_rate:0.001, momentum:0.0, batch_size:64, l2_decay:0.01};

var opt = {};
opt.temporal_window = temporal_window;
opt.experience_size = 30000;
opt.start_learn_threshold = 5000;
opt.gamma = 0.7;
opt.learning_steps_total = 500000;
opt.learning_steps_burnin = 10000;
opt.epsilon_min = 0.00;
opt.epsilon_test_time = 0.00;
opt.layer_defs = layer_defs;
opt.tdtrainer_options = tdtrainer_options;

var brain = new deepqlearn.Brain(num_inputs, num_actions, opt);



// MAIN RUNNER
// 
// 
var iteration = 1;
var intervalDelayInMS = 0;
var actions = 0; var wastedClicks = 0;
var old_reward = 0;

// Steps 
// 1. record the reward from the play_game response
// 2. get the next action from the input vector
// 3. send a request with the nextAction
function iterationResponseHandler(data, status) {
	// record reward
	
	// wrap input vector (boxes grid)
	var vol = new convnetjs.Vol(data.input_vector);
	// pass the input to the brain
	var nextAction = brain.forward(data.input_vector);
	// visualization library for the convnet brain
	brain.backward(data.reward);
	

	brain.visSelf(document.getElementById('brain_info_div'));

	// Curious about ratio of wasted clicks to real actions
	if(data.illegal_move) {
		wastedClicks += 1;
	} else {
		actions += 1;
	}

	// Interface
	$('#last-move').text(data.illegal_move ? 'No' : 'Yes');
	$('#last-reward').text(data.reward);
	$('#human-lines').text(parseInt(data.human_cut_lines));
	$('#computer-lines').text(parseInt(data.comp_cut_lines));

	$('#human-wins').text(parseInt(data.human_win));
	$('#computer-wins').text(parseInt(data.computer_win));
	$('#tie').text(parseInt(data.tie));
	$('#action-ratio').text(actions + '/' + (actions+wastedClicks) + ' (' + actions / (actions+wastedClicks) + '%)');

	iteration++; // Deep - do we even need to limit iterations?
	if(iteration < 10000000) { // Deep - let me know if you want to put a timer in to change the speed of the requests

		setTimeout( function () {
			// send next action to the API via AJAX (XHR)
			$.ajax({
				url: "/game_api/give_number?user_id=" + user_id + "&q=" + nextAction + "&human_cut_lines=" + data.human_cut_lines,
				context: document.body
			}).done( iterationResponseHandler );
		}, intervalDelayInMS);

	}
}

function setIntervalDelay(delay) {
	intervalDelayInMS = delay;
}

function startLearning() {
	brain.learning = true;
}
function stopLearning() {
	brain.learning = false;
}

// first request
$.ajax({
	url: "/game_api/play_game?user_id=" + user_id,
	context: document.body
}).done( function(data, status) {
	iterationResponseHandler(data, status);
});
</script>

</head>

<body>
	<div class="row">
		<div class="large-12 columns">
			<h1>Box Killer</h1>
			<p>Minimal UI Demo of ConvNet.js killing the Boxes AI</p>
		</div>
	</div>

	<div class="row">
		<div class="large-6 columns">
			<h4>Current game:</h4>
			<p>
				Last move was an action: <span id="last-move"></span><br/>
				Last reward: <span id="last-reward"></span><br/>
				Boxkiller's score: <span id="human-lines"></span><br/>
				DeepAI's score: <span id="computer-lines"></span>
			</p>
		</div>
		<div class="large-6 columns">
			<h4>Settings:</h4>
			<div>
				<button onclick="setIntervalDelay(0)">No Delay</button>
				<button onclick="setIntervalDelay(1000)">Slower (1 sec)</button>
				<br/>
				<button onclick="stopLearning()">Stop Learning</button>
				<button onclick="startLearning()">Start Learning</button>
			</div>
		</div>
	</div>

	<div class="row">
		<div class="large-6 columns">
			<h4>Brain info:</h4>
			<div id="brain_info_div" style="margin-bottom: 40px"></div>
		</div>
		<div class="large-6 columns">
			<h4>History:</h4>
			<p>
				Real Actions / Total Actions: <span id="action-ratio"></span><br/>
				Boxkiller's wins: <span id="human-wins"></span><br/>
				DeepAI's wins: <span id="computer-wins"></span><br/>
				Tie: <span id="tie"></span>
			</p>
		</div>
	</div>

</body>

</html>
